@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column" style="gap: 10px">
    <li class="nav-item custom-btn custom-border-btn btn">
        <a href="@Url.Page("./Index")" id="profile" class="@ManageNavPages.IndexNavClass(ViewContext)">Profile</a>
    </li>
    <li class="nav-item custom-btn custom-border-btn btn">
        <a href="@Url.Page("./Email")" id="email" class="@ManageNavPages.EmailNavClass(ViewContext)">Email</a>
    </li>
    <li class="nav-item custom-btn custom-border-btn btn">
        <a href="@Url.Page("./ChangePassword")" id="change-password" class="@ManageNavPages.ChangePasswordNavClass(ViewContext)">Password</a>
    </li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item">
            <a href="@Url.Page("./ExternalLogins")" id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)">External logins</a>
        </li>
    }
    <li class="nav-item custom-btn custom-border-btn btn">
        <a href="@Url.Page("./TwoFactorAuthentication")" id="two-factor" class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)">Two-factor authentication</a>
    </li>
    <li class="nav-item custom-btn custom-border-btn btn">
        <a href="@Url.Page("./PersonalData")" id="personal-data" class="@ManageNavPages.PersonalDataNavClass(ViewContext)">Personal data</a>
    </li>

</ul>
